#!/usr/bin/env python
import argparse
import inquirer
import configparser
from csv import DictReader
from os.path import expanduser, isfile

home = expanduser('~')

home_credentials = home + '/.aws/credentials'
credentials = configparser.ConfigParser()
credentials.read(home_credentials)

home_config = home + '/.aws/config'
config = configparser.ConfigParser()
config.read(home_config)

profiles = [
    inquirer.List(
        'profile',
        message="Select a profile to set as default",
        choices=list(set(credentials.sections() + config.sections())),
    ),
]


def magic(new_profile_name):
    found_flag = False
    for parser, file_path in zip([credentials, config],
                                 [home_credentials, home_config]):
        if new_profile_name in parser:
            found_flag = True
            new_profile_name_default = parser[str(new_profile_name)]
            parser['default'] = new_profile_name_default
            with open(file_path, 'w') as parser_file:
                parser.write(parser_file)
            print(f'AWS profile `{new_profile_name}` has been set as default in `{file_path}`')

    if not found_flag:
        print(f'AWS profile `{new_profile_name}` not found')
        exit(1)


parser = argparse.ArgumentParser()
parser.add_argument("--add", required=False, action='store_true')
parser.add_argument("-f", "--credentials-file", required=False)
parser.add_argument("-a", "--alias", required=False)
parser.add_argument("--use", required=False)
args = parser.parse_args()

if args.add:
    if args.alias:
        if isfile(args.credentials_file):
            with open(args.credentials_file, 'r') as credfile:
                reader = csv.DictReader(credfile)
                for row in reader:
                    config.add_section(args.alias)
                    config[args.alias]["aws_access_key_id"] = row['Access key ID']
                    config[args.alias]["aws_secret_access_key"] = row['Secret access key']
                    with open(home_credentials, 'w') as configfile:
                        config.write(configfile)
    else:
        exit("No alias was provided")
elif args.use:
    new_profile_name = args.use
    magic(new_profile_name)
else:
    selected_new_profile_name = inquirer.prompt(profiles)
    magic(selected_new_profile_name['profile'])
